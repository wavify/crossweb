#!/usr/bin/env node

var daemon = require('daemon'),
    exec = require('child_process').exec,
    fs = require('fs'),
    path = require('path')
    spawn = require('child_process').spawn,
    wrench = require('wrench');

var commands = {
  start: {
    description: 'Start crossweb project',
    execute: function (argv) {
      var applicationPath = null;
      
      var current = process.cwd();
      var pidPath = path.join(current, 'run.pid');
      var nodeModulePath = path.join(current, 'node_modules');
      
      if (fs.existsSync(path.join(current, 'server', 'app.js'))) {
        applicationPath = 'server/app.js';
      } else if (fs.existsSync(path.join(current, 'app.js'))) {
        applicationPath = 'app.js';
        pidPath = path.join(current, '..', 'run.pid');
        nodeModulePath = path.join(current, '..', 'node_modules');
      } else {
        console.error ('Main application file does not exists');
      }
      
      if (applicationPath) {
        if (fs.existsSync(pidPath)) {
          var pid = fs.readFileSync(pidPath, 'utf8');
          exec('kill ' + pid);
        }
        
        var startNodeService = function () {
          // Invoke node
          var pids = ''
          var node = spawn('node', [ applicationPath ]);
          pids += node.pid + '\n';

          console.log ('Start application on ' + node.pid);

          daemon.daemonize('/dev/null', pidPath, function (error, pid) {

            pids += pid + '\n';
            fs.writeFileSync(pidPath, pids);

          });
        }

        if (fs.existsSync(nodeModulePath)) {
          startNodeService();
        } else {
          console.log ('Installing dependencies');
          var npm = spawn('npm', [ 'install' ]);
          npm.on('exit', function (code) {
            startNodeService();
          });
        }
        
      }
      
    }
  },
  stop: {
    description: 'Stop crossweb project',
    execute: function () {
      var current = process.cwd();
      var pidPath = path.join(current, 'run.pid');
      
      if (fs.existsSync(path.join(current, 'app.js'))) {
        applicationPath = 'app.js';
        pidPath = path.join(current, '..', 'run.pid');
      } 
      
      if (fs.existsSync(pidPath)) {
        var pids = fs.readFileSync(pidPath, 'utf8');
        var lines = pids.split('\n');
        for (var index = 0; index < lines.length; index++) {
          if (lines[index].length > 0) {
            exec('kill ' + lines[index]);
          }
        }
        
        fs.unlinkSync(pidPath);
        
        console.log ('Stopped project success');
      } else {
        console.log ('No project process found');
      }
    }
  },
  generate: {
    description: 'Generate crossweb project',
    execute: function (argv) {
      if (argv.length < 4) {
        console.error ('Usage: cw generate [project name]');
      } else {
        var name = argv[3];
        
        var valid = /^[\w-]+$/;
        if (valid.test(name)) {
          var projectPath = path.resolve('.', name);
          if (fs.existsSync(projectPath)) {
            console.error ('Error: Project "' + name + '" already exists.');
          } else {
            fs.mkdirSync(projectPath, 0755);
            
            var templateDirectory = path.join(__dirname, '..', 'templates');
            wrench.copyDirSyncRecursive(templateDirectory, projectPath);
            
            console.log ('Create project "' + name + '" success.');
          }
        } else {
          console.error ('Error: Invalid project name.');
        }
      }
    }
  },
  help: {
    description: 'Show this help',
    execute: function () {
      var package = path.join(__dirname, '..', 'package.json');
      var config = JSON.parse(fs.readFileSync(package, 'utf8'));
      
      console.log ('Crossweb version: ' + config.version);
      console.error ('Usage: cw [command]');
      
      console.error ();
      console.error ('Commands:');

      for (var command in commands) {
        console.error ('  ' + command + ': ' + commands[command].description);
      }
      
      console.error ();
    }
  }
  
}

var main = function (argv) {
  
  var target = null;
  
  // Parse
  if (argv.length > 2) {
    var parameters = argv.slice(3);
    var argument = argv[2];
    target = commands[argument];
  } 
  
  if (target) {
    target.execute(argv);
  } else {
    commands.help.execute();
  }
  
  
}

main (process.argv);